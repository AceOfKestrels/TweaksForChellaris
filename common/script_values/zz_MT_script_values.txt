
#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	- pow (value is multiplied by itself to the power of x; be careful, you can get overflows if you are not careful)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)
# 	# 	- square (multiply by itself)
# 	# 	- square_root

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1

MT_envy_value = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_relation
		parameters = {
			limit = {
				relative_power = {
					who = root
					category = technology
					value >= superior
				}
			}
		}
		mode = add
	}
}

num_MT_owned_relics = {
	complex_trigger_modifier = {
		trigger = num_owned_relics
		mode = add
	}
}

num_MT_owned_relics_x5 = {
	complex_trigger_modifier = {
		trigger = num_owned_relics
		mode = add
	}
	mult = 5
}

MT_desecration_envy_value = {
	base = 0
	complex_trigger_modifier = {
		trigger = num_fallen_empires
		mode = add
	}
}

MT_perc_of_planet_pop = {
	add = trigger:num_pops
	subtract = 1
	max = 2
}

MT_num_spy_networks = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_spynetwork
		parameters = {
			limit = {
				has_spy_power > 59
			}
		}
		mode = add
	}
}

mt_peace_time = {
	base = 0
	complex_trigger_modifier = {
		trigger = years_of_peace
		mode = add
	}
	max = 60
}

mt_overlord_navy = {
	base = 0
	add = trigger:max_naval_capacity
	divide = 10
}

mt_overlord_opinion = {
	base = 0
	complex_trigger_modifier = {
		trigger = their_opinion
		parameters = {
			who = overlord
		}
		mode = add
	}
	divide = 500
}

#MT_valor_force_disparity = {
#	base = 0
#	add = trigger:fromfrom.fleet_power
#	divide = trigger:fromfromfrom.fleet_power
#}

mt_manipulation_agenda_duration = {
	base = 3600
	mult = modifier:council_agenda_finishing_effect_duration_mult
	add = 3600
}

mt_diligence_last_stand_value = {
	base = 0
	add = trigger:def_war_exhaustion_sum
	divide = 4
}

mt_power_projection = {
	base = 1
	add = modifier:country_power_projection_influence_produces
	add = 2
	add = value:mt_power_projection_produces_mult
	add = value:mt_power_projection_influence_produces_mult
}

mt_power_projection_influence_produces_mult = {
	base = 1
	add = modifier:country_power_projection_influence_produces
	add = 2
	mult = modifier:country_power_projection_influence_produces_mult
}

mt_power_projection_produces_mult = {
	base = 1
	mult = modifier:country_power_projection_influence_produces
	add = 2
	mult = modifier:country_power_projection_produces_mult
}

mt_double_naval_capacity_used = {
	base = 2
	mult = trigger:used_naval_capacity_integer
}

mt_royal_projection = {
	base = 1
	divide = trigger:empire_size
	mult = value:mt_double_naval_capacity_used
	max = 1
	mult = value:mt_power_projection
}

MT_royalty_value = {
	base = 1
	add = trigger:subjects
	modifier = {
		subtract = 1
		is_subject = yes
	}
	modifier = {
		add = 5
		has_federation = yes
		is_federation_leader = yes
	}
	modifier = {
		add = 3
		is_part_of_galactic_council = yes
	}
	modifier = {
		add = 5
		is_galactic_custodian = yes
	}
	modifier = {
		add = 10
		is_galactic_emperor = yes
	}
}

MT_royalty_ruler_level = {
	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
 		trigger = has_level
 		trigger_scope = ruler 		#Lets you get the result of the trigger on a different scope. Default is "this"
 		mode = add 					#Allows all numerical operations
 	}
	add = modifier:ruler_skill_add
	add = modifier:councilor_skill_add
}

MT_num_neighbors = {
	base = 10
	complex_trigger_modifier = {
		trigger = count_relation
		parameters = {
			limit = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
			}
		}
		mode = subtract
	}
}

count_neighbor_country = {
	count = <num/all/variable>
	limit = { <triggers> }
}